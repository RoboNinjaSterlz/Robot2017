// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2016.robot2017.subsystems;
import org.usfirst.frc2016.robot2017.Robot;
import org.usfirst.frc2016.robot2017.RobotMap;
import org.usfirst.frc2016.robot2017.commands.*;

import com.ctre.CANTalon;
import com.ctre.CANTalon.FeedbackDevice;
import com.ctre.CANTalon.TalonControlMode;

import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 *
 */
public class GearSlide extends Subsystem {

	private boolean didWeMove=true;
	
	public double presetPositions[] = new double[2];
	// Desired encoder count for positioning the gearSlideTalon.
	private double desiredPosition = 0;
	
	/* Used for initialization sequence
	 * If slideCenterSensor is true, we are left of center
	 * If slideCenterSensor is false, we are right of center
	 * capture the starting position to determine the initial direction to calibrate.
	 * if set, run right until not set.
	 * if not set, go to next step.
	 * then run left until set and stop.
	*/
	private boolean startingLeft;
	private enum State {
		START,
		MOVERIGHT,
		MOVELEFT,
		DONE
	}
	
	/* 0 start
	   1 moving right
	   2 moving left
	   3 done
	 */
	private State calibrateState;

	// keeps track of when the gearSlideTalon is calibrated
	private boolean needsCalibrate;

	// How good does the position need to be
	private final double AbsoluteTolerance = 3;
	
	// Labels for presets in robot prefs on dashboard
	public final String[] ElevatorPositionLabels = { 
		"Low",
		"High"
	};
	
	public final int
		LEFT = 0,
		CENTER = 1,
		RIGHT = 2;
	
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final CANTalon gearSlideTalon = RobotMap.gearSlideGearSlideTalon;
    private final DigitalInput slideCenterSensor = RobotMap.gearSlideSlideCenterSensor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS


    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public GearSlide() {
    	needsCalibrate = true;
    	calibrateState = State.START;
    	startingLeft=slideCenterSensor.get();

    	gearSlideTalon.setProfile(0);
    	gearSlideTalon.setFeedbackDevice(FeedbackDevice.QuadEncoder);
    	gearSlideTalon.reverseSensor(false);
    	gearSlideTalon.reverseOutput(false);
    	gearSlideTalon.setAllowableClosedLoopErr(0);
    	// Keep off until we are calibrated.
    	// Hard limits should protect everything.
    	gearSlideTalon.enableForwardSoftLimit(false);
    	gearSlideTalon.enableReverseSoftLimit(false);
    	gearSlideTalon.clearStickyFaults();
    	gearSlideTalon.ClearIaccum();
    	//gearSlideTalon.setVoltageRampRate(6.0);
    	//gearSlideTalon.setCloseLoopRampRate(.);
    	//gearSlideTalon.configMaxOutputVoltage(12);
    	// Needed for calibrate
    	gearSlideTalon.changeControlMode(TalonControlMode.PercentVbus);	
    }

    public void startCalibrate() {
    	gearSlideTalon.changeControlMode(TalonControlMode.PercentVbus);	
    	needsCalibrate = true;
    	calibrateState = State.START;
    	startingLeft=gearSlideTalon.isFwdLimitSwitchClosed();
    }

    // Put methods for controlling this subsystem
        // here. Call these from Commands.
    public void doCalibrate() {
    	// Zero out the encoder by running the slide to the center
    	// until they reach the optical sensor 
    	switch (calibrateState) {
    		case START:
    			if (slideCenterSensor.get()) {
        			gearSlideTalon.set(.3); // Run fwd at 30% power
        			calibrateState=State.MOVERIGHT;
        		}
        		else {
        			gearSlideTalon.set(-.3); // Run back at 30% power
    				calibrateState=State.MOVELEFT;
        		}
    			break;
    			
    		case MOVERIGHT:
    			if (!slideCenterSensor.get()) {
        			gearSlideTalon.set(.3); // Run fwd at 30% power
        			calibrateState=State.MOVELEFT;
        		}
    			break;
    			
    		case MOVELEFT:
    			if (slideCenterSensor.get()) {
        			gearSlideTalon.set(0); // Run fwd at 30% power
        			calibrateState=State.DONE;
        		}
    			break;
    		case DONE:
        		desiredPosition = 0;
        		gearSlideTalon.changeControlMode(TalonControlMode.Position);
        		// reset the encoder
        		gearSlideTalon.setPosition(0);
        		gearSlideTalon.set(0);
        		gearSlideTalon.reverseSensor(true);
        		gearSlideTalon.reverseOutput(false);
        		gearSlideTalon.enable();
        		needsCalibrate = false;
    			break;
    	}
/*
    	if (gearSlideTalon.isFwdLimitSwitchClosed()) {
    		gearSlideTalon.set(0); // Turn off output
    	} else {
    		needsCalibrate = true;
    		if (gearSlideTalon.isFwdLimitSwitchClosed()) {
    			gearSlideTalon.set(.3); // Run fwd at 30% power
    		}
    		else
    			gearSlideTalon.set(-.3); // Run back at 30% power
    		}
    		
    	}
*/
    }

    	// Returns true if the GearElevator is in the home position
    	public boolean isElevatorAtHome() {
        	return (gearSlideTalon.isFwdLimitSwitchClosed());
        }

    	// Goes to the encoder count that is passed
        public void goTo(double height) {
    		desiredPosition = height;
    		if (Robot.robotIsCalibrated) {
    			gearSlideTalon.set(height);
    		}
    		//gearSlideTalon.enableControl();
        	}
        public void goToPreset(int position) {
        	
        	didWeMove = false;
        	if ((position >= 0) && (position <= presetPositions.length - 1)) {
        		if (Math.abs(presetPositions[position] - desiredPosition) > AbsoluteTolerance ) {
        			didWeMove=true;
        		}
        		goTo(presetPositions[position]);
          	}
        }
    	public void incrementHeight() {
    		desiredPosition++;
    		goTo(desiredPosition);
    	}
    	
    	public void decrementHeight() {
    		desiredPosition--;
    		goTo(desiredPosition);
    	}
    	
    	public void adjustSlide( double adjust) {
    		desiredPosition+=adjust;
    		//if (desiredPosition < 0) {
    		//	desiredPosition = 0;
    		//}
    		goTo(desiredPosition);
    	}	
    	
    	// Returns true of the gearSlideTalon is at the desired position (done moving)
    	public boolean isPositioned() {
    		double position;
    		position = Math.abs(desiredPosition - getPosition());
    		return (position <= AbsoluteTolerance);
/*    		position = gearSlideTalon.getClosedLoopError();
    		return (AbsoluteTolerance >= Math.abs(position));
*/
    		}
    	
    	// Returns the current postion error
    	public int getPositionError() {
    		return gearSlideTalon.getClosedLoopError();
    	}

    	// Returns the current position
    	public int getPosition() {
    		return (int) gearSlideTalon.getPosition();
    	}
    	
    	public boolean GearElevatorMoved() {
    		return (didWeMove);
    	}
    	
    	// Returns true if the gearSlideTalon has been calibrated
    	public boolean isCalibrated(){
    		return !needsCalibrate;
    	}
    	
    /*	public boolean safeToHomeScoop() {
    		return (isShooterAtHome() ); //|| (getPosition() < presetPositions[LOW]));
    	}
    	
      */  
    	// mostly for debugging updates the smart dashboard with position info
    	public void periodic() {
    		SmartDashboard.putNumber("GearSlideTalon Desired Pos", gearSlideTalon.getSetpoint());
    		SmartDashboard.putNumber("GearSlide Position", getPosition());
    		SmartDashboard.putNumber("GearSlide Position Error", getPositionError());
    		SmartDashboard.putBoolean("Slide is Positioned", isPositioned());
    		//SmartDashboard.putBoolean("Did Move",shooterMoved());
//    		SmartDashboard.putBoolean("limit sensor", shooterLowerLimit.get());
    	}
        
    	public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new JoystickSlide());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
}


