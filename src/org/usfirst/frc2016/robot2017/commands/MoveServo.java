// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2016.robot2017.commands;
import edu.wpi.first.wpilibj.command.Command;

import org.usfirst.frc2016.robot2017.Robot;

/**
 *
 */
public class MoveServo extends Command {
	private double waitCounter;
	private final double DELAYPERCOUNT = .02;
	private final double TIME2WAIT = .750;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
    private double m_position;
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public MoveServo(double position) {
    	m_position=position;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
       

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
	//	Robot.servoTest.moveServo(m_position);
		//waitCounter = TIME2WAIT/DELAYPERCOUNT;
	}


    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
		//waitCounter --;
    	Robot.servoTest.moveServo( (1 + Robot.oi.operatorJoy.getY()) / 2);
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
		//return 	waitCounter <=0;
    return false;
    }

    // Called once after isFinished returns true
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}
