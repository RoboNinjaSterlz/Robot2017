// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2016.robot2017.subsystems;

import org.usfirst.frc2016.robot2017.Robot;
import org.usfirst.frc2016.robot2017.RobotMap;
import org.usfirst.frc2016.robot2017.commands.TankDrive;

import edu.wpi.first.wpilibj.Solenoid;
import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.SpeedController;
/**
import.edu.wpi.first.wpilibj.SpeedController;


*
*
 */
public class Drivetrain extends Subsystem {

    /*
     * The following block of variables are used to hold values loaded from
     * NV RAM by RobotPrefs.
    */
	public double drivetrainVoltageLimit;
	public double rampIncrement = .2;
	
	private double leftCurrentSpeed = 0;
	private double rightCurrentSpeed = 0;
	
    /*
     * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     * End of values set by RobotPrefs
     */
    

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final SpeedController leftdrive = RobotMap.drivetrainLeftdrive;
    private final SpeedController rightdrive = RobotMap.drivetrainRightdrive;
    private final RobotDrive robotDrive = RobotMap.drivetrainRobotDrive;
    private final Encoder leftEncoder = RobotMap.drivetrainLeftEncoder;
    private final Encoder rightEncoder = RobotMap.drivetrainRightEncoder;
    private final Solenoid shiftSolenoid = RobotMap.drivetrainShiftSolenoid;
    private final Compressor compressor = RobotMap.drivetrainCompressor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public Drivetrain() {
    	compressor.start();
    	leftEncoder.reset();
    	rightEncoder.reset();
    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void arcadeDrive(Joystick joy) {
    	robotDrive.arcadeDrive(joy, true);
    }
    
    public void arcadeDrive(double speed, double direction) {
    	robotDrive.arcadeDrive(speed, direction);
    }
    
    public void gyroDrive(double speed, double angle) {
    	double steer =  (Robot.gyro.getAngle() - angle);
    	if (steer > 180) {
    		steer = steer - 360;
    	}
    	else if (steer < -180) {
    		steer = steer + 360;
    	}
    	steer *= -Robot.gyro.gyroP;
    	
    	if (steer > Robot.gyro.TURN_MAX) {
    		steer = Robot.gyro.TURN_MAX;
    	}
    	else if (steer < -Robot.gyro.TURN_MAX) {
    		steer = -Robot.gyro.TURN_MAX;
    	}
    	if (speed== 0) {
    		//Use the joystick or stop if centered
    		Robot.drivetrain.arcadeDrive(Robot.oi.driveRight.getY(), steer);
    	}
    	else {
    		Robot.drivetrain.arcadeDrive(speed, steer);
    	}
    }
    
    public void tankDrive(Joystick leftJoy, Joystick rightJoy) {
    	double rightY;
    	double leftY;
    	//if (Robot.frontCameraActive) {
    		rightY= adjustDriveValue(rightJoy.getY());
    		leftY = adjustDriveValue(leftJoy.getY());
    	//}
    	//else {
    	//	leftY= -adjustDriveValue(rightJoy.getY());
    	//	rightY = -adjustDriveValue(leftJoy.getY());
    	//}
        // The values to pass to the motors are adjusted by the ramp method
        leftCurrentSpeed = returnRamp(leftCurrentSpeed, leftY);
        rightCurrentSpeed = returnRamp(rightCurrentSpeed, rightY);
        //SmartDashboard.putNumber("LJoyY", letfY);
        //SmartDashboard.putNumber("LCurrentSpeed", leftCurrentSpeed);
    	robotDrive.tankDrive(leftCurrentSpeed, rightCurrentSpeed);
    }	
    
    public void driveStop() {
    
    	robotDrive.tankDrive(0,0);
    }
    
    public void setMax() {
        robotDrive.setMaxOutput(drivetrainVoltageLimit);
    }
    
    private double adjustDriveValue(double joyY) {
        // Scale the value by the drive limit to limit speed over full travel of the joystick
        joyY = joyY * drivetrainVoltageLimit;
        
        // Square the values for better control at the low end
        // Check the sign now to fix it later
        boolean ltz = joyY < 0;
        joyY = joyY * joyY;

        /* should no longer be needed with scale above
        // Limit logic
        if (Math.abs(leftY) > RobotMain.drivetrainVoltageLimit) {
            leftY = RobotMain.drivetrainVoltageLimit;
        }
        */
        
        // Fix the sign
        if (ltz) {
            joyY *= -1;
        }
        
    	return joyY ;
    }

    // This method performs the ramp calculation for the drive train
    double returnRamp(double currentSpeed, double desiredSpeed) {
    	double delta = desiredSpeed - currentSpeed;
/*    	if ( delta < 0 && desiredSpeed > 0) { //slowing from forward, but still forward
    		return desiredSpeed;
    	}
    	if ( delta > 0 && desiredSpeed < 0) { // slowing from reverse but still reverse)
    		return desiredSpeed;
    	}
*/    	if (delta > rampIncrement) {
    		delta = rampIncrement;
    	}
    	else if ( delta < - rampIncrement) {
    		delta = - rampIncrement;
    	}
    	return (currentSpeed + delta);
    }
    public void shiftLow() {
    	shiftSolenoid.set(false);
    }

    public void shiftHigh() {
    	shiftSolenoid.set(true);
    	
    }
    public double getRightEncoder() {
    	return rightEncoder.getDistance();
    }
    public double getLeftEncoder() {
    	return leftEncoder.getDistance();
    }
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new TankDrive());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
}

