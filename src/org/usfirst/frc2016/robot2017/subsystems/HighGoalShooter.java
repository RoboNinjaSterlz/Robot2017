// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2016.robot2017.subsystems;

import org.usfirst.frc2016.robot2017.Robot;
import org.usfirst.frc2016.robot2017.RobotMap;
import org.usfirst.frc2016.robot2017.commands.*;

import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.Joystick.AxisType;

import com.ctre.CANTalon;
import com.ctre.CANTalon.FeedbackDevice;
import com.ctre.CANTalon.TalonControlMode;

import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/*
 * To compute the FF term, run the motor with the joy stick full throttle.
 * From the riolog or smart dashboard, check the speed reported.
 * 
 * Take the speed as RPM and plug it into the following formula
 * (<RPM from riolog>) X (1 min / 60 sec) X (1 sec / 10 TvelMeas) X (<Counts per rev or the encoder> / rotation)
 * =  <native units per 100ms>
 * 
 * Now lets calculate a Feed-forward gain so that 100% motor output is calculated when the
 * requested speed is <native units per 100ms>.
 * F-gain = (100% X 1023) / <native units per 100 ms>
 * 
 * Example
 * Motor speed at full = 3300 RPM
 * 
 * Encoder 250 count quad encoder = 1000 counts per rev
 * 
 * 3300RPM/60 Sec/Min) = 55RPS
 * 55RPS/10 * 1000CPR = 5500 native units per 100ms
 * 
 * 1023/5500 = .186 Feed-forward
 * 
 * I found this need some tweaking to get the error down to under 100 RPM
 * 
 * After setting the FF in the Talon SRX, run the motor with the button pressed.
 * Note the difference between the speed and target.
 * Keep in mind the the error is not in RPM, but in native units/ sample period



F-gain = 0.1097

 */

public class HighGoalShooter extends Subsystem {

	public double speed;

	// Storage for preset speeds
	public double presetSpeed[] = new double[4];

	// Labels for the Speeds in robot prefs on the smart dashboard
	public final String[] WheelSpeedLabels = { 
			"0",
			"1",
			"2",
			"3"
		};

	private final double SPEED_TOLERANCE = 100;
	
	/** some objects used for printing to the console */
	 StringBuilder _sb = new StringBuilder();
	 int _timeToPrint = 0;
	 int loops;

	 // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final CANTalon wheelTalon = RobotMap.wheelDrivewheelTalon;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public HighGoalShooter()
    {
    	wheelTalon.setProfile(0);
    	wheelTalon.setFeedbackDevice(FeedbackDevice.QuadEncoder);
    	wheelTalon.reverseSensor(false);
    	wheelTalon.reverseOutput(false);
    	wheelTalon.configEncoderCodesPerRev(7);
    	wheelTalon.setAllowableClosedLoopErr(0);
    	// Keep off until we are calibrated.
    	// Hard limits should protect everything.
    	wheelTalon.enableForwardSoftLimit(false);
    	wheelTalon.enableReverseSoftLimit(false);
    	wheelTalon.clearStickyFaults();
    	wheelTalon.ClearIaccum();
    	//wheelTalon.setVoltageRampRate(6.0);
    	//wheelTalon.setCloseLoopRampRate(.);
    	//wheelTalon.configMaxOutputVoltage(12);

    	// Till we are ready to go
//    	wheelTalon.changeControlMode(TalonControlMode.Disabled);	
    	wheelTalon.changeControlMode(TalonControlMode.Speed);
    	wheelTalon.set(0);
    };
    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void runAtSpeed(double speed)
    {

    	wheelTalon.changeControlMode(TalonControlMode.Speed);
    	wheelTalon.set(speed);
    	//wheelTalon.enable();
    }
    public void runAtPresetSpeed(int speed)
    {
    	wheelTalon.changeControlMode(TalonControlMode.Speed);
      	wheelTalon.set(presetSpeed[speed]);
      //	wheelTalon.enable();
    }
    
    public void stop() 
    {
    	wheelTalon.set(0);	
    }
    
    public boolean atSpeed()
    {
    	return(wheelTalon.getClosedLoopError() < Math.abs(SPEED_TOLERANCE));
    }
 
    public void periodic() 
    {
    	speed = wheelTalon.getSpeed();
    }
    public void setupPeriodic()
    {
    	double operatorJoy = -Robot.oi.operatorJoy.getY();
    	
    	double motorOutput = wheelTalon.getOutputVoltage()/wheelTalon.getBusVoltage();
    	_sb.append("\tout:");
    	_sb.append(motorOutput);
    	_sb.append("\tspd:");
    	_sb.append(wheelTalon.getSpeed());
    	
    	if (Robot.oi.operatorJoy.getRawButton(1))
    	{
    		double targetSpeed = operatorJoy *1500;
    		wheelTalon.changeControlMode(TalonControlMode.Speed);
    		wheelTalon.enable();
    		wheelTalon.set(targetSpeed);
    		_sb.append("\terr:");
    		_sb.append(wheelTalon.getClosedLoopError());
    		_sb.append("\ttrg:");
    		_sb.append(targetSpeed);
    		SmartDashboard.putNumber("Speed",wheelTalon.getSpeed() );
    	}
    	else
    	{
    		wheelTalon.changeControlMode(TalonControlMode.PercentVbus);
    		wheelTalon.enable();
    		wheelTalon.set(operatorJoy);        	
    	}
    	if (++loops >= 10)
    	{
    		loops = 0;
    		System.out.println(_sb.toString());
    	}
    	_sb.setLength(0);
    }
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
}

